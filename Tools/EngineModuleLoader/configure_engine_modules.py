import json
import argparse
import os

def parse_arguments():
    parser = argparse.ArgumentParser(description="Generate EngineBuildOptions.cmake from EngineConfig.json")
    parser.add_argument('--json', required=True, help='Path to EngineConfig.json')
    parser.add_argument('--out', required=True, help='Output directory for EngineBuildOptions.cmake')
    return parser.parse_args()

def load_config(json_path):
    abs_path = os.path.abspath(json_path)
    print(f"🔍 Reading config from: {abs_path}")

    if os.path.getsize(json_path) == 0:
        raise ValueError("JSON file is empty")

    with open(json_path, 'r') as f:
        content = f.read()
        print(f"📄 File contents:\n{content}")
        return json.loads(content)

def write_cmake_options(config, output_path):
    modules = config.get("modules", {})
    lines = []

    lines.append("# Auto-generated by configure_engine_modules.py\n")

    for key, enabled in modules.items():
        var = f"LOOM_ENABLE_{key.upper()}"
        value = "ON" if enabled else "OFF"
        lines.append(f"set({var} {value} CACHE BOOL \"Enable {key}\" FORCE)")

    # Write to file
    with open(output_path, 'w') as f:
        f.write('\n'.join(lines))
        f.write('\n')  # end with newline

def main():
    args = parse_arguments()

    config_path = os.path.abspath(args.json)
    out_dir = os.path.abspath(args.out)
    output_file = os.path.join(out_dir, 'EngineBuildOptions.cmake')

    config = load_config(config_path)
    write_cmake_options(config, output_file)

    print(f"Generated: {output_file}")

if __name__ == "__main__":
    main()
